#include <iostream>
#include <string.h>
#include <string>

using namespace std;

int MinPeriod(char* p)
{
    int nLen = (int)strlen(p);
    if(nLen == 0)
        return -1;
    int* next = new int[nLen];  //仿照KMP求"伪next"
    next[0] = -1;  //哨兵:串首标志
    int k = -1;
    int j = 0;
    while(j < nLen - 1)
    {
        if((k == -1) || (p[j+1] == p[k]))
        {
            ++k;
            ++j;
            next[j] = k;
        }
        else
        {
            k = next[k];
        }
    }
    next[0] = 0;  //恢复成逻辑上的0

    int nLast = next[nLen-1];
    delete[] next;
    if(nLast == 0)
        return -1;
    if(nLen % (nLen-nLast) == 0)
        return nLen-nLast;
    return -1;
}
void GetNext(char* p, int next[])
{
    int nLen = (int)strlen(p);
    next[0] = -1;
    int k = -1;
    int j = 0;
    while(j < nLen - 1)
    {
        //此刻，k即next[j-1]，且p[k]表示前缀，p[j]表示后缀
        //注：k==-1表示未找到k前缀与k后缀相等，首次分析可先忽略
        if(k == -1 || p[j] == p[k])
        {
            ++j;
            ++k;
            next[j] = k;
        }
        else    //p[j]与p[k]失配，则继续递归计算前缀p[next[k]]
        {
            k = next[k];
        }
    }
}
void GetNext2(char* p, int next[])
{
    int nLen = (int)strlen(p);
    next[0] = -1;
    int k = -1;
    int j = 0;
    while(j < nLen - 1)
    {
        if(k == -1 || p[j] == p[k])
        {
            ++j;
            ++k;
            if(p[j] == p[k])
                next[j] = next[k];
            else
                next[j] = k;
        }
        else
        {
            k = next[k];
        }
    }
}
int KMP(char* g_s, char* g_pattern, int g_next[])
{
    int ans = -1;
    int i = 0;
    int j = 0;
    int n = strlen(g_s);
    int pattern_len = strlen(g_pattern);
    while(i < n)
    {
        if(j == -1 || g_s[i] == g_pattern[j])
        {
            ++i; ++j;
        }
        else
            j = g_next[j];
        if(j == pattern_len)
        {
            ans = i - pattern_len;
            break;
        }
    }
    return ans;
}
void Print(int* a, int size)
{
    for(int i = 0; i < size; i++)
        cout << a[i] << ' ';
    cout << endl;
}
int main()
{
    // string s = "abaabbccabaabcabayyaba";
    // char* g_s = const_cast<char*>(s.c_str());

    char* g_s = "abaabbccabaabcabayyaba";
    char* g_pattern = "abaabcaba";
    int nLen = (int)strlen(g_pattern);

    int g_next[nLen];
    GetNext(g_pattern, g_next);
    Print(g_next, nLen);

    int result = KMP(g_s, g_pattern, g_next);
    cout << result << endl;  // index
    cout << MinPeriod(g_pattern) << endl;
    return 0;
}
