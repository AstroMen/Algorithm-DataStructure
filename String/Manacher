#include <iostream>
#include <string.h>
using namespace std;
void Manacher(const char* s, int& from, int& to)
{
    int size = strlen(s);
    int N = 2*size+1;
    int* P = new int[N];
    P[0] = 1;
    int id = 0;
    int mx = 1;
    int center = 0;	//最长回文子串的中心
    int ml = 1;		//最长回文子串的长度
    for(int i = 1; i < N; i++)
    {
        if(mx > i)
        {
            P[i] = min(P[2*id-i], mx-i);
        }
        else
        {
            P[i] = 1;
        }
	// i != P[i] 已经到数组首位
	// i+P[i]) % 2 == 1 奇数位是#，偶数位是数
	// s[(i+P[i])/2-1] == s[(i-P[i])/2-1] 以i为中心，比较左右值是否相等，是否能进一步扩大P[i]
        while((i != P[i]) && (((i+P[i]) % 2 == 1)
            || (s[(i+P[i])/2-1] == s[(i-P[i])/2-1])))
            P[i]++;
        if(mx < i+P[i])
        {
            mx = i + P[i];
            id = i;
        }
        if(ml < P[i])
	{
	    ml = P[i];
	    center = i;
	}
    }
    from = (center - ml) / 2;
    to = from + ml - 2;
}
void Print(const char* str, int from, int to)
{
    for(int i = from; i <= to; i++)
	cout << str[i];
    cout << '\n';
}
int main()
{
    string s = "dabba";
    char* str = const_cast<char*>(s.c_str());
    int N = strlen(str);
    N = 2*N+1;
    int from=0, to=0;
    Manacher(str, from, to);
    Print(str, from, to);
    return 0;
}
