#include <iostream>
#include <stack>
#include <set>
#include <queue>
using namespace std;

//搜索cur的孩子结点，存入children中
void Extend(const string& cur, vector<string>& children, const set<string>& dict, const string& end, set<string>& visit)
{
    string child = cur;
    children.clear();    //※※※※※
    char t;
    for(int i=0; i<(int)cur.size(); i++)
    {
        t=child[i];  //记录原始字符
        for(char c='a'; c<='z'; c++)
        {
            if(c==t)
                continue;
            child[i] = c;
            //查找词典有或是终点单词 且 未被访问
            if(((child==end)||dict.find(child)!=dict.end())
               && visit.find(child)==visit.end())
            {
                children.push_back(child);
                visit.insert(child);
            }
        }
        child[i]=t;
    }
}

int CalcLadderLength(const string& start, const string& end, const set<string>& dict)
{
    queue<string> q;
    q.push(start);
    vector<string> children;  //从当前结点可扩展得到的新结点集合
    set<string> visit;  //记录访问过的结点，防止重访问
    int step = 0;
    string cur;
    int curNumber = 1;  //当前层剩余结点数目
    int nextNumber = 0;  //下一层孩子结点数目
    while(!q.empty())
    {
        /****** 1 获取cur层 ******/
        cur = q.front();  //从cur开始扩展
        q.pop();
        curNumber--;
        /****** 2 获取next层 ******/
        Extend(cur, children, dict, end, visit);
        nextNumber += (int)children.size();
        /****** 3 当前层遍历完，则遍历下一层 ******/
        if(curNumber == 0)
        {
            step++;
            curNumber=nextNumber;
            nextNumber=0;
        }
        /****** 4 将children放入队列 ******/
        for(vector<string>::const_iterator it=children.begin();it!=children.end();it++)
        {
            if(*it==end)  //找到终点
                return step;
            q.push(*it);
        }
    }
    return 0;
}

int main()
{
    set<string> dict;
    dict.insert("hot");
    dict.insert("dot");
    dict.insert("dog");
    dict.insert("lot");
    dict.insert("log");
    string start = "hit";
    string end = "cog";
    cout << CalcLadderLength(start, end, dict);
    return 0;
}
