#include <iostream>
#include <string.h>

using namespace std;

int a[] = {-3, -5, -2, 4, 2, 1, 3};
int size = sizeof(a)/sizeof(int);
int sum = 5;    //sum为计算的和

void Print(bool* x)
{
    for(int i=0;i<size;i++)
        if(x[i])
            cout << a[i] << ' ';
    cout << endl;
}

void FindNumber(bool* x, int i, int has, int negative, int positive)
{
    if(i>=size)return;
    if(has+a[i]==sum)
    {
        x[i]=true;
        Print(x);
        x[i]=false;
    }
    if(a[i]>=0)
    {
        if((has+a[i]<=sum) && (has+positive>=sum))
        {
            x[i]=true;
            FindNumber(x, i+1, has+a[i], negative, positive-a[i]);
            x[i]=false;
        }
        if(has+positive-a[i]>=sum)
        {
            x[i]=false;
            FindNumber(x, i+1, has, negative, positive-a[i]);
        }
    }
    else
    {
        if(has+a[i]+positive>=sum)
        {
            x[i]=true;
            FindNumber(x, i+1, has+a[i], negative-a[i], positive);
            x[i]=false;
        }
        if((has+negative) && (has+positive>=sum))
        {
            x[i]=false;
            FindNumber(x, i+1, has, negative-a[i], positive);
        }
    }
}

void Sum(int* a, int size, int& positive, int& negative)
{
    for(int i=0;i<size;i++)
    {
        if(a[i]>=0)
            positive+=a[i];
        else
            negative+=a[i];
    }
}
int main()
{
    int positive, negative;
    Sum(a, size, positive, negative);
    bool* x = new bool[size];
    memset(x, 0, size);
    int has=0;
    FindNumber(x,0,has,negative,positive);
    delete[] x;
    return 0;
}
