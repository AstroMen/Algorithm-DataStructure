// Source : https://leetcode.com/problems/rotate-array/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Rotate an array of n elements to the right by k steps.
* 
* For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
*
* Note:
* Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
*    
**********************************************************************************/

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        if(n==0||k==0)return;
        k=k%n;
        reverse(nums, 0, n-k-1);
        reverse(nums, n-k, n-1);
        reverse(nums, 0, n-1);
    }
private:
    void reverse(vector<int>& nums, int low, int high)
    {
        while(low<high)
            swap(nums[low++],nums[high--]);
    }
};

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        if(n==0||k==0)return;
        k=k%n;
        reverse(nums.begin(), nums.begin() + nums.size() - k);
        reverse(nums.begin() + nums.size() - k, nums.end());
        reverse(nums.begin(), nums.end());
    }
};
