// Source : https://leetcode.com/problems/longest-palindrome/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given a string which consists of lowercase or uppercase letters, 
* find the length of the longest palindromes that can be built with those letters.
* This is case sensitive, for example "Aa" is not considered a palindrome here.
* Note:
* Assume the length of given string will not exceed 1,010.
* 
* Example:
* Input:
* "abccccdd"
* Output:
* 7
* 
* Explanation:
* One longest palindrome that can be built is "dccaccd", whose length is 7.
* 
**********************************************************************************/

//3ms From: https://discuss.leetcode.com/topic/61307/5-lines-c
class Solution {
public:
    int longestPalindrome(string s) {
        vector<int> m(256, 0);        
        for (auto& c : s) m[c-'\0']++;    // '\0' is 0. Only to repair warning about the type coercion
        int result = 0;
        for (auto& i : m) result += i%2 ? (result%2 ? i-1 : i) : i;
        //                                 奇数   已有单独位  未有  偶数
        return result;
    }
};
/*
* checking result for whether we already used an odd one. Can be a bit shorter, though:
*     result += i - (i & 1 & result);
*     or
*     result += i & ~(result & 1);
* We can use each letter's full count i, except when after pairing them up there's an odd extra one (i & 1) and
*   we already used an odd extra one (& result), then we need to leave it behind.
*/
