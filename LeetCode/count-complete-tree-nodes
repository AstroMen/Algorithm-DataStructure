// Source : https://leetcode.com/problems/count-complete-tree-nodes/
// Time:  O(h * logn) = O((logn)^2)
// Space: O(1)

/********************************************************************************** 
* 
* Given a complete binary tree, count the number of nodes.
* 
* Definition of a complete binary tree from Wikipedia:
* In a complete binary tree every level, except possibly the last, is completely filled,
*     and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
*    
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

The path from root to a leaf in a binary tree can be represented by a binary code.
we can use "0" to represent to move left, use "1" to represents to move right.
for example, "101", means root->right->left->right.
so 0 means left most leaf, 1 means the 2nd left leaf,..., and pow(2,level)-1 means right most leaf.
we can use this to do binary search.
//143ms From: https://discuss.leetcode.com/topic/15795/76ms-cpp-binary-search-using-binary-path-code/2
class Solution {
public:
    bool check(TreeNode* root,int code,int level){
        int mask = 1 << (level - 1);
        for(int i = 0; i < level;i++){
            if((code & mask) == mask){
                root = root->right;
            }else{
                root = root->left;
            }
            mask >>= 1;
        }
        return root != NULL;
    }
    int countNodes(TreeNode* root) {
        int level = 0;
        if(root == NULL){
            return 0;
        }
        TreeNode* p = root;
        while(p != NULL){
            p = p->left;
            level++;
        }
        int count = (1 << (level - 1)) - 1;
        int l = 0;
        int h = count;
        int mm = 0;
        while(l <= h){
            int m = l + (h - l) / 2;
            if(check(root,m,level-1)){
                if( m > mm){
                    mm = m;
                }
                l = m + 1;
            }else{
                h = m - 1;
            }
        }
        return count + mm + 1;
    }
};

