// Source : https://leetcode.com/problems/reverse-linked-list/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Reverse a singly linked list.
* Hint: A linked list can be reversed either iteratively or recursively. Could you implement both?
*    
**********************************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//6ms From: https://discuss.leetcode.com/topic/17916/8ms-c-iterative-and-recursive-solutions-with-explanations
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* dummy=new ListNode(0);
        dummy->next=head;
        ListNode* pre=dummy;
        ListNode* cur=head;
        while(cur&&cur->next)
        {
            ListNode* temp=pre->next;
            pre->next=cur->next;
            cur->next=cur->next->next;
            pre->next->next=temp;
        }
        return dummy->next;
    }
};

//recursion
//9ms From: https://discuss.leetcode.com/topic/28317/my-5-lines-c-program-using-recursion
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == NULL || head->next == NULL) {
			return head;
		}
		ListNode* root = reverseList(head->next);
		head->next->next = head;
		head->next = NULL;
		return root;
    }
};
