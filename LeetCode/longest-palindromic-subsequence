// Source : https://leetcode.com/problems/longest-palindromic-subsequence/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.
* 
* Example 1:
* Input:
* "bbbab"
* Output:
* 4
* One possible longest palindromic subsequence is "bbbb".
* 
* Example 2:
* Input:
* "cbbd"
* Output:
* 2
* One possible longest palindromic subsequence is "bb". 
* 
**********************************************************************************/

//https://discuss.leetcode.com/topic/78579/dynamic-programming-solution-with-reference
//http://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        if(n < 2) return n;
        int i, j, count;
        //int dp[n][n];  // Create a table to store results of subproblems
        vector<vector<int> > dp(n, vector<int>(n, 0));
        
        // Strings of length 1 are palindrome of lentgh 1
        for (i = 0; i < n; i++)
            dp[i][i] = 1;

        for(count=2; count<=n; count++)
        {
            for(i=0; i<n-i+1; i++)
            {
                j = i+count-1;
                if(s[i] == s[j] && count == 2)
                    dp[i][j] = 2;
                else if(s[i] == s[j])
                    dp[i][j] = dp[i+1][j-1]+2;// dp[i][j-1], dp[i+1][j] dp[i+1][j-1]+2
                else
                    dp[i][j] = max(dp[i][j-1], dp[i+1][j]);
            }
        }
        return dp[0][n-1];
        
        int N = s.size();
        vector<vector<int> > dp(1+N, vector<int>(1+N, 0));
        for(int i = 0; i <= N; i++) dp[i][i] = 1;
        for(int len = 2; len <= N; len++) {
            for(int i = 1; i+len-1 <= N; i++) {
                int j = i + len-1;
                dp[i][j] = max(dp[i][j-1], max(dp[i+1][j], dp[i+1][j-1] + (len >= 2 && s[i-1] == s[j-1] ? 2 : INT_MIN)));
            }
        }
        return dp[1][N];
    }
};
