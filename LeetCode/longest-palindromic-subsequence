// Source: https://leetcode.com/problems/longest-palindromic-subsequence/
// Time:  O(n^2)
// Space: O(n)
// Method: Dynamic Programming.

/********************************************************************************** 
* 
* Given a string s, find the longest palindromic subsequence's length in s. 
* You may assume that the maximum length of s is 1000.
* 
* Example 1:
* Input:
* "bbbab"
* Output:
* 4
* One possible longest palindromic subsequence is "bbbb".
* 
* Example 2:
* Input:
* "cbbd"
* Output:
* 2
* One possible longest palindromic subsequence is "bb". 
* 
**********************************************************************************/

//79ms From: https://discuss.leetcode.com/topic/78579/dynamic-programming-solution-with-reference
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();
        vector<vector<int> > dp(n+1, vector<int>(n+1,0)); // Create a table to store results of subproblems
    
        // Strings of length 1 are palindrome of lentgh 1
        for (int i = 0; i < n; i++)
            dp[i][i] = 1;
    
        for(int count=2; count<=n; count++)
        {
            for(int i=0; i<n-i+1; i++)
            {
                int j = i+count-1;
                if(s[i] == s[j] && count == 2)
                    dp[i][j] = 2;
                else if(s[i] == s[j])
                    dp[i][j] = dp[i+1][j-1]+2;  // dp[i][j-1], dp[i+1][j], dp[i+1][j-1]+2
                else
                    dp[i][j] = max(dp[i][j-1], dp[i+1][j]);
            }
        }
        return dp[0][n-1];
    }
};

//112ms Explanation: https://discuss.leetcode.com/topic/78685/sharing-my-clean-o-n-2-c-dp-solution-super-easy-and-clear
class Solution {
public:
    //lhs means left hand side, rhs means right hand side
    int longestPalindromeSubseq(string s) {
        if (s.empty()) return 0;
        
        vector<vector<int>> longest(s.size(), vector<int>(s.size()));
        for (int len=1; len<=s.size(); len++) {
            for (int lhs=0; lhs+len<=s.size(); lhs++) {
                int rhs = lhs+len-1;
                if (lhs == rhs) {
                    longest[lhs][rhs] = 1;
                } else if (lhs+1 == rhs) {
                    longest[lhs][rhs] = (s[lhs] == s[rhs]) ? 2 : 1;
                } else {
                    int add = s[lhs] == s[rhs] ? 2 : 0;
                    longest[lhs][rhs] = max(max(longest[lhs][rhs-1], longest[lhs+1][rhs]), longest[lhs+1][rhs-1] + add);
                }
            }
        }
        return longest[0].back();
    }
};
