// Source : https://leetcode.com/problems/unique-paths-ii/
// Time:  O(n^2)
// Space: O(1)

/********************************************************************************** 
* 
* Follow up for "Unique Paths":
* Now consider if some obstacles are added to the grids. How many unique paths would there be?
* 
* An obstacle and empty space is marked as 1 and 0 respectively in the grid.
* For example,
* There is one obstacle in the middle of a 3x3 grid as illustrated below.
* [
*   [0,0,0],
*   [0,1,0],
*   [0,0,0]
* ]
* The total number of unique paths is 2.
* 
* Note: m and n will be at most 100.
*    
**********************************************************************************/

//3ms From: https://discuss.leetcode.com/topic/19748/c-o-mn-time-o-1-space-use-obstaclegrid
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int h = obstacleGrid.size();
        if(h == 0) return 0;
        int w = obstacleGrid[0].size();
        if(w == 0) return 0;
        if(obstacleGrid[0][0]) return 0;
        
        // first cell has 1 path
        obstacleGrid[0][0] = 1;
        
        // first row all are '1' until obstacle (from left only)
        for(int i=1; i<w; i++){
            obstacleGrid[0][i] = obstacleGrid[0][i] ? 0 : obstacleGrid[0][i-1];
        }
    
        for(int j=1; j<h; j++){
            // first column is like first row (from top only)
            obstacleGrid[j][0] = obstacleGrid[j][0] ? 0 : obstacleGrid[j-1][0];
            
            // others are up+left
            for(int i=1; i<w; i++){
                obstacleGrid[j][i] = obstacleGrid[j][i] ? 0 : obstacleGrid[j-1][i] + obstacleGrid[j][i-1];
            }
        }
        return obstacleGrid[h-1][w-1];
    }
};
