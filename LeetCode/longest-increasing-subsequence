// Source : https://leetcode.com/problems/longest-increasing-subsequence/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given an unsorted array of integers, find the length of longest increasing subsequence.
* 
* For example,
* Given [10, 9, 2, 5, 3, 7, 101, 18],
* The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. 
* Note that there may be more than one LIS combination, it is only necessary for you to return the length.
* 
* Your algorithm should run in O(n2) complexity.
* 
* Follow up: Could you improve it to O(n log n) time complexity?
*    
**********************************************************************************/

//DP 113ms From: https://discuss.leetcode.com/topic/28685/c-typical-dp-n-2-solution-and-nlogn-solution-from-geekforgeek
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        const int size = nums.size();
        if (size == 0) { return 0; } 
        vector<int> dp(size, 1);
        int res = 1;
        for (int i = 1; i < size; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j]+1);
                }
            }
            res = max (res, dp[i]);
        }
        return res;
    }
};
// Example:
// nums[] 1 4 6 2 8 9 7
// dp[]   1 2 3 2 4 5 4  calculate how many numbers before dp[i] less than dp[i]

//Binary Search 113m //https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res;
        for(int i=0; i<nums.size(); i++) {
            auto it = std::lower_bound(res.begin(), res.end(), nums[i]);
            if(it==res.end()) res.push_back(nums[i]);
            else *it = nums[i];
        }
        return res.size();
    }
};
// Example:
// nums[] 1 4 6 2 8 9 7
// dp[]   1 4 6 8 9
//          | |
//          2 6
//            |
//            7
