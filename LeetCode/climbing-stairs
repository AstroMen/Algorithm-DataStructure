// Source : https://leetcode.com/problems/climbing-stairs/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* You are climbing a stair case. It takes n steps to reach to the top.
* Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? 
*    
**********************************************************************************/

//0ms From: https://discuss.leetcode.com/topic/955/easy-solutions-for-suggestions/12
class Solution {
public:
    int climbStairs(int n) {
        if(n == 0 || n == 1 || n == 2){return n;}
        int a = 1;
        int b = 2;
        int c = 0;
        for (int i = 0; i < n - 2; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
};

/* Print all path (TLE in leetcode) */
int sum=0, len=0;
int step[10]={};
void printPaths();
void compute(int stairs)
{
    if(stairs<0)return;
    if(stairs==0)
    {
        printPaths();
        ++sum;
        return;
    }
    for(int i=1;i<=3;++i)  //If each time you can either climb 1 or 2 or 3 steps
    {
        step[len] = i;
        ++len;
        compute(stairs-i);
        --len;
    }
}
void printPaths()
{
    int paths=0;
    cout<<"0";
    for(int i=0;i<len;++i)
    {
        paths+=step[i];
        cout<<"->"<<paths;
    }
    cout<<endl;
}
int main()
{
    int stairs=10;
    compute(stairs);
    return 0;
}

/* If each time you can either climb 1 or 2 or 3 steps */
int climbStairs(int n) {
    if(n == 0 || n == 1 || n == 2 || n == 3){return n;}
    int a = 1;
    int b = 2;
    int c = 4;
    int d = 0;
    for (int i = 0; i < n - 3; i++) {
        d = a + b + c;
        a = b;
        b = c;
        c = d;
    }
    return d;
}
