// Source: https://leetcode.com/problems/linked-list-cycle/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given a linked list, determine if it has a cycle in it. 
* 
**********************************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//9ms From: https://discuss.leetcode.com/topic/13627/my-easy-12ms-c-solution-sharing
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *fast;
        fast = head;
        while (head)
        {
            head = head->next;
            if (fast->next && fast->next->next)
                fast = fast->next->next;
            else
                return false;
                
            if (fast == head)
                return true;
        }
        return false;
    }
};
