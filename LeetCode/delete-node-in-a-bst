// Source : https://leetcode.com/problems/delete-node-in-a-bst/
// Time:  O(height of tree)
// Space: O(1)

/********************************************************************************** 
* 
* Given a root node reference of a BST and a key, delete the node with the given key in the BST.
* Return the root node reference (possibly updated) of the BST.
* 
* Basically, the deletion can be divided into two stages:
* 1. Search for a node to remove.
* 2. If the node is found, delete the node.
* 
* Example:
* root = [5,3,6,2,4,null,7]
* key = 3
* 
*     5
*    / \
*   3   6
*  / \   \
* 2   4   7
* 
* Given key to delete is 3. So we find the node with value 3 and delete it.
* 
* One valid answer is [5,4,6,2,null,null,7], shown in the following BST.
* 
*     5
*    / \
*   4   6
*  /     \
* 2       7
* 
* Another valid answer is [5,2,6,null,4,null,7].
* 
*     5
*    / \
*   2   6
*    \   \
*     4   7
*    
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //42ms
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(key < root->val) {
            root->left = deleteNode(root->left, key);
        }
        else if(key > root->val) {
            root->right = deleteNode(root->right, key);
        }
        else {
            //single or no child case
            if(!root->left || !root->right) {
                TreeNode* next = root->left ? root->left : root->right;
                delete root;
                return next;
            }
            //two children case
            TreeNode* curr = root->right;
            while(curr->left) curr = curr->left;
            root->val = curr->val;
            root->right = deleteNode(root->right, curr->val); //delete curr node
        }
        return root;
    }
};
