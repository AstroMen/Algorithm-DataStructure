// Source : https://leetcode.com/problems/triangle/
// Time:  O(n^2)
// Space: O(1)

/********************************************************************************** 
* 
* Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
*
* For example, given the following triangle
* [
*      [2],
*     [3,4],
*    [6,5,7],
*   [4,1,8,3]
* ]
* 
* The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11). 
*    
**********************************************************************************/

//6ms
//设状态为f(i; j)，表示从从位置(i; j)出发，路径的最小和，则状态转移方程为f(i; j) = min {f(i, j + 1), f(i + 1, j + 1)} + (i, j)
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.size()==0) return 0;
        
        for(int i=triangle.size()-2;i>=0;i--)
        {
            for(int j=0;j<i+1;j++)
            {
                triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1]);
            }
        }
        return triangle[0][0];
    }
};
