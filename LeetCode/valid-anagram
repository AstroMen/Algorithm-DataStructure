// Source : https://leetcode.com/problems/valid-anagram/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given two strings s and t, write a function to determine if t is an anagram of s.
* 
* For example,
* s = "anagram", t = "nagaram", return true.
* s = "rat", t = "car", return false.
* 
* Note:
* You may assume the string contains only lowercase alphabets.
* 
* Follow up:
* What if the inputs contain unicode characters? How would you adapt your solution to such case?
* 
**********************************************************************************/

//16ms https://discuss.leetcode.com/topic/20303/2-c-solutions-with-explanations
/* Hash Table
* 
* This idea uses a hash table to record the times of appearances of each letter in the two strings s and t.
* For each letter in s, it increases the counter by 1 while for each letter in t, it decreases the counter by 1.
* Finally, all the counters will be 0 if they two are anagrams of each other.
* 
* The first implementation uses the built-in unordered_map and takes 36 ms.
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) return false;
        int n = s.length();
        unordered_map<char, int> counts;
        for (int i = 0; i < n; i++) {
            counts[s[i]]++;
            counts[t[i]]--;
        }
        for (auto count : counts)
            if (count.second) return false;
        return true;
    }
};
/*
* Since the problem statement says that "the string contains only lowercase alphabets",
* we can simply use an array to simulate the unordered_map and speed up the code.
* The following implementation takes 12 ms.
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) return false;
        int n = s.length();
        int counts[26] = {0};
        for (int i = 0; i < n; i++) { 
            counts[s[i] - 'a']++;
            counts[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++)
            if (counts[i]) return false;
        return true;
    }
};

/* Sorting
* 
* Since the problem statement says that "the string contains only lowercase alphabets",
* we can simply use an array to simulate the unordered_map and speed up the code.
* The following implementation takes 48 ms.
*/
bool isAnagram(string s, string t) { 
    sort((char*)s.c_str(), (char*)s.c_str() + s.size());
    sort((char*)t.c_str(), (char*)t.c_str() + t.size());
    return s == t; 
}
