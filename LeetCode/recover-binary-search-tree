// Source : https://leetcode.com/problems/recover-binary-search-tree/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Two elements of a binary search tree (BST) are swapped by mistake.
* 
* Recover the tree without changing its structure.
* Note:
* A solution using O(n) space is pretty straight forward. Could you devise a constant space solution? 
* 
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// From: https://discuss.leetcode.com/topic/3988/no-fancy-algorithm-just-simple-and-powerful-in-order-traversal/13
class Solution {
    TreeNode* firstElement = null;
    TreeNode* secondElement = null;
    // The reason for this initialization is to avoid null pointer exception in the first comparison
    // when prevElement has not been initialized
    TreeNode* prevElement = new TreeNode(Integer.MIN_VALUE);
public:
    void recoverTree(TreeNode* root) {
        // In order traversal to find the two elements
        traverse(root);
        
        // Swap the values of the two nodes
        int temp = firstElement.val;
        firstElement.val = secondElement.val;
        secondElement.val = temp;
    }
private:
    void traverse(TreeNode root) {
        if (root == null)
            return;
        
        traverse(root.left);
        
        // Start of "do some business",
        // If first element has not been found, assign it to prevElement (refer to 6 in the example above)
        if (firstElement == null && prevElement.val >= root.val) {
            firstElement = prevElement;
        }
        // If first element is found, assign the second element to the root (refer to 2 in the example above)
        if (firstElement != null && prevElement.val >= root.val) {
            secondElement = root;
        }
        // current value. In next time, it is previous value.
        prevElement = root;
        // End of "do some business"

        traverse(root.right);
    }
};

class Solution { 
public:
    void recoverTree(TreeNode* root) {
        pre = first = second = NULL;
        inorder(root);
        if (first) {
            int temp = first -> val;
            first -> val = second -> val;
            second -> val = temp;
        }
    }
private:
    TreeNode *first, *second, *pre;
    void inorder(TreeNode* root) {
        if (!root) return;
        inorder(root -> left);
        if (pre && pre -> val > root -> val) {
            if (!first) first = pre;
            second = root;
        }
        pre = root;
        inorder(root -> right);
    } 
};

class Solution {
public:
    TreeNode* first = NULL;
    TreeNode* second = NULL;
    TreeNode* prev = new TreeNode(INT_MIN);

    void recoverTree(TreeNode* root) {
        f(root);
        swap(first->val, second->val);
    }

    void f(TreeNode* root) {
        if (!root) return;
        f(root->left);
        if (!first && root->val <= prev->val) first = prev;
        if (first && root->val <= prev->val) second = root;
        prev = root;
        f(root->right);
    }
};
