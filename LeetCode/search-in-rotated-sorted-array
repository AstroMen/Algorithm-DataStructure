// Source : https://leetcode.com/problems/search-in-rotated-sorted-array/
// Time:  O(log N)
// Space: O(1)

/********************************************************************************** 
* 
* Suppose a sorted array is rotated at some pivot unknown to you beforehand.
* (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
* 
* You are given a target value to search. If found in the array return its index, otherwise return -1.
* 
* You may assume no duplicate exists in the array.
*    
**********************************************************************************/

//Binary Search
//3ms From: https://discuss.leetcode.com/topic/40995/10-lines-simple-and-concise-c-solution-with-detailed-explanation-and-thought-process/2
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1;
        
        while(l <= r){
            int mid = l + (r - l) / 2;
        
            if(nums[mid] == target) return mid;
            if(nums[mid] > nums[r]){
                if(target > nums[mid] || target <= nums[r]) l = mid + 1;   // condition for pick right side
                else r = mid - 1;    // else, pick left side
            }else{
                if(target <= nums[r] && target > nums[mid]) l = mid + 1;  // condition for pick right side
                else r = mid - 1;     // else, pick left side
            }
        }
        return -1;
    }
};
