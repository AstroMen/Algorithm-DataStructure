// Source : https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given an integer matrix, find the length of the longest increasing path.
* 
* From each cell, you can either move to four directions: left, right, up or down.
* You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).
* 
* Example 1:
* nums = [
*   [9,9,4],
*   [6,6,8],
*   [2,1,1]
* ]
* 
* Return 4
* The longest increasing path is [1, 2, 6, 9].
* 
* Example 2:
* nums = [
*   [3,4,5],
*   [3,2,6],
*   [2,2,1]
* ]
* 
* Return 4
* The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*    
**********************************************************************************/

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size()==0) return 0;
        int row = matrix.size();
        int col = matrix[0].size();
        vector<vector<int>> visit(row, vector<int>(col, 0));
        int curPath = 1;
        int maxPath = 1;
        
        for(int i=0; i<row; i++)
            for(int j=0; j<col; j++)
            {
                curPath=1;
                longIncPathHelper(matrix, visit, i, j, curPath, maxPath);
            }  
        return maxPath;
    }
    void longIncPathHelper(const vector<vector<int>>& matrix, vector<vector<int>>& visit, int i, int j, int& curPath, int& maxPath)
    {
        int m[4] = {-1,1,0,0};
        int n[4] = {0,0,-1,1};
        
        for(int k=0; k<4; k++)
        {
            if(isAvailble(matrix, i+m[k], j+n[k]))
            {
                if(!visit[i+m[k]][j+n[k]])
                {
                    if(matrix[i+m[k]][j+n[k]]>matrix[i][j])
                    {
                        visit[i][j] = 1;
                        longIncPathHelper(matrix, visit, i+m[k], j+n[k], ++curPath, maxPath);
                        visit[i][j] = 0;
                        //visit ?? curPath??
                    }
                    else
                    {
                        maxPath=max(curPath, maxPath);
                        curPath--;
                    }
                }
            }
        }
    }
    bool isAvailble(const vector<vector<int>>& matrix, const int i, const int j)
    {
        int row = matrix.size();
        int col = matrix[0].size();
        if(i<0 || i>=row || j<0 || j>=col)
            return false;
        return true;
    }
};
