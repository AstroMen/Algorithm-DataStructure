// Source : https://leetcode.com/problems/longest-common-prefix/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Write a function to find the longest common prefix string amongst an array of strings.
* 
**********************************************************************************/

//6ms From: https://discuss.leetcode.com/topic/28962/6-line-c-lightening-fast
//check from strs[0][0] to strs[j][0]. If matches, check strs[0][1] to strs[j][1]...
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.size()==0) return "";
        for (int i=0; i<strs[0].length(); i++)
            for (int j=0; j<strs.size(); j++)
                if ( strs[0][i] != strs[j][i] )
                    return strs[0].substr(0, i);
        return strs[0];
    }
};

//6ms From: https://discuss.leetcode.com/topic/16623/3-diffrent-c-solutions-each-one-costs-8ms
//Trie Tree
class TrieNode{
public:
  	bool val;
	  TrieNode* next[52];
	  int sons;
  	TrieNode() :val(false), sons(0)
  	{
	    	for (int i = 0; i < 52; i++)
		      	next[i] = nullptr;
  	}
};
class Trie{
private:
  	TrieNode* putst(string& s, TrieNode * node, int loc, TrieNode *father)
  	{
	    	if (s.length() == 0)
	    	{
	      		node->val = true;
	    	  	node->sons++;
		        return node;
	    	}
	    	if (node == nullptr)
	    	{
		      	node = new TrieNode();
		      	if (father != nullptr)
			          father->sons++;
	    	}
	    	if (loc == s.length())
	    	{
		      	node->val = true;
	      		return node;
		    }
		    if (s[loc] >= 'a')
		      	node->next[s[loc] - 'a'] = putst(s, node->next[s[loc] - 'a'], loc + 1, node);
	    	else
		      	node->next[s[loc] - 'A' + 26] = putst(s, node->next[s[loc] - 'A' + 26], loc + 1, node);
	    	return node;
  	}
public:
	  TrieNode *root;
	  void insert(string & str){ putst(str, root, 0, nullptr); }
	  Trie(){ root = new TrieNode(); }
};
class Solution {
private:
  	string findPre(TrieNode * node)
    {
        if (node == nullptr || (node != nullptr&&node->sons > 1))
	  		    return string("");
	  	  int i = 0;
	    	for (i = 0; i < 52; i++)
    		{
	      		if (node->next[i] != nullptr)
			        	break;
	    	}
	    	if (i == 52)
		      	return string("");
		    char temp1 = ((i>25) ? ('A' + i) : ('a' + i));
	    	string temp;
	    	temp.insert(temp.begin(), temp1);
	    	if (node->val)
	    	{
	      		return string("");
	    	}
	    	else
	    	{
		      	return temp + findPre(node->next[i]);
	    	}
	  }
public:
	  string longestCommonPrefix(vector<string>& strs) {
	    	Trie a;
	    	for (auto& str : strs)
		  	a.insert(str);
		    return findPre(a.root);
	  }
};

