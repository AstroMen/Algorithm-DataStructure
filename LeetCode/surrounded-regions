// Source : https://leetcode.com/problems/surrounded-regions/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
*  Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
* A region is captured by flipping all 'O's into 'X's in that surrounded region.
*
* For example,
* X X X X
* X O O X
* X X O X
* X O X X
*
* After running your function, the board should be:
*
* X X X X
* X X X X
* X X X X
* X O X X
*    
**********************************************************************************/

//16ms BFS
class Solution {
public:
    bool IsOcean(vector<vector<char> >& land, int M, int N, int i, int j)
    {
        if((i < 0) || (i >= M) || (j < 0) || (j >= N))
            return false;
        return land[i][j] == 'O';
    }
    
    void Ocean(vector<vector<char> >& land, int M, int N, int i, int j)
    {
        queue<pair<int,int> > q;
        q.push(make_pair(i,j));
        int iDirect[] = {-1,1,0,0};
        int jDirect[] = {0,0,-1,1};
        int iCur,jCur;
        int k;
        while(!q.empty())
        {
            i = q.front().first;
            j = q.front().second;
            q.pop();
            for(k = 0; k < 4; k++)
            {
                //查找邻域
                iCur = i + iDirect[k];
                jCur = j + jDirect[k];
                if(IsOcean(land, M, N, iCur, jCur))
                {
                    q.push(make_pair(iCur,jCur));  //扩展区域查找
                    land[iCur][jCur] = 'Y';
                }
            }
        }
    }
    void solve(vector<vector<char>>& land) {
        int M=land.size();
        if(!M)
        	return;
        int N=land[0].size();
        //从边缘开始，获得海洋区域
        for(int i = 0; i < M; i++)
        {
            if(land[i][0] == 'O')
                Ocean(land, M, N, i, 0);
            if(land[i][N-1] == 'O')
                Ocean(land, M, N, i, N-1);
        }
        for(int j = 1; j < N-1; j++)
        {
            if(land[0][j] == 'O')
                Ocean(land, M, N, 0, j);
            if(land[M-1][j] == 'O')
                Ocean(land, M, N, M-1, j);
        }
    
        //恢复海洋，填湖
        for(int i = 0; i < M; i++)
        {
            for(int j = 0; j < N; j++)
            {
                if(land[i][j] == 'Y')     //是海洋，恢复成水
                    land[i][j] = 'O';
                else if(land[i][j] == 'O' && i!=0 && i!=M-1 && j!=0 && j!=N-1)//是湖泊
                    land[i][j] = 'X';     //填湖
            }
        }
    }
};

//13ms DFS From: https://discuss.leetcode.com/topic/45119/concise-12ms-c-dfs-solution
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;
        int row = board.size(), col = board[0].size();
        for (int i = 0; i < row; ++i) {
            check(board, i, 0);             // first column
            check(board, i, col - 1);       // last column
        }
        for (int j = 1; j < col - 1; ++j) {
            check(board, 0, j);             // first row
            check(board, row - 1, j);       // last row
        }
        for (int i = 0; i < row; ++i)
            for (int j = 0; j < col; ++j)
                if (board[i][j] == 'O') board[i][j] = 'X';
                else if (board[i][j] == '1') board[i][j] = 'O';
    }
    
    void check(vector<vector<char>>& board, int i, int j) {
        if (board[i][j] == 'O') {
            board[i][j] = '1';
            if (i > 1) check(board, i - 1, j);
            if (j > 1) check(board, i, j - 1);
            if (i + 1 < board.size()) check(board, i + 1, j);
            if (j + 1 < board[0].size()) check(board, i, j + 1);
        }
    }
};

//12ms From: https://discuss.leetcode.com/topic/17224/a-really-simple-and-readable-c-solution-only-cost-12ms
class Solution {
public:
	void solve(vector<vector<char>>& board) {
        int i,j;
        int row=board.size();
        if(!row)
        	return;
        int col=board[0].size();

		for(i=0;i<row;i++){
			check(board,i,0,row,col);
			if(col>1)
				check(board,i,col-1,row,col);
		}
		for(j=1;j+1<col;j++){
			check(board,0,j,row,col);
			if(row>1)
				check(board,row-1,j,row,col);
		}
		for(i=0;i<row;i++)
			for(j=0;j<col;j++)
				if(board[i][j]=='O')
					board[i][j]='X';
		for(i=0;i<row;i++)
			for(j=0;j<col;j++)
				if(board[i][j]=='1')
					board[i][j]='O';
    }
	void check(vector<vector<char> >&vec,int i,int j,int row,int col){
		if(vec[i][j]=='O'){
			vec[i][j]='1';
			if(i>1)
				check(vec,i-1,j,row,col);
			if(j>1)
				check(vec,i,j-1,row,col);
			if(i+1<row)
				check(vec,i+1,j,row,col);
			if(j+1<col)
				check(vec,i,j+1,row,col);
		}
	}
};
