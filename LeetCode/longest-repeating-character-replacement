// Source : https://leetcode.com/problems/longest-repeating-character-replacement/
// Time:  O()
// Space: O()
// Method: Sliding Window, Regard char as array.

/********************************************************************************** 
* 
* Given a string that consists of only uppercase English letters, 
* you can replace any letter in the string with another letter at most k times.
* Find the length of a longest substring containing all repeating letters you can get after performing the above operations.
* 
* Note:
* Both the string's length and k will not exceed 104.
* 
* Example 1:
* Input:
* s = "ABAB", k = 2
* Output:
* 4
* Explanation:
* Replace the two 'A's with two 'B's or vice versa.
* 
* Example 2:
* Input:
* s = "AABABBA", k = 1
* Output:
* 4
* Explanation:
* Replace the one 'A' in the middle with 'B' and form "AABBBBA".
* The substring "BBBB" has the longest repeating letters, which is 4.
* 
**********************************************************************************/

//9ms From: https://discuss.leetcode.com/topic/63416/sliding-window-similar-to-finding-longest-substring-with-k-distinct-characters
class Solution {
public:
    int characterReplacement(string s, int k) {
        vector<int> count(26, 0);
        int max_len = 0, max_occur = 0, start = 0;
        for (int end = 0; end < s.size(); end++) {
            char ch = s[end] - 'A';
            count[ch]++;
            max_occur = max(max_occur, count[ch]);
            if (end - start - max_occur + 1 > k) {
                count[s[start] - 'A']--;
                start++;
            }
            max_len = end - start + 1;
        }
        return max_len;
    }
};
