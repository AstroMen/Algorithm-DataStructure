// Source : https://leetcode.com/problems/move-zeroes/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
*  Given an array nums, write a function to move all 0's to the end of it
*      while maintaining the relative order of the non-zero elements.
*
* For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
*
* Note:
*    You must do this in-place without making a copy of the array.
*    Minimize the total number of operations.
*    
**********************************************************************************/

//13ms From: https://discuss.leetcode.com/topic/32632/a-95-26-beat-rate-solution
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0;
        // move all the nonzero elements advance
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
        }
        for (;j < nums.size(); j++) {
            nums[j] = 0;
        }
    }
};

//29ms From: https://discuss.leetcode.com/topic/24745/c-accepted-code
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int last = 0, cur = 0;
        
        while(cur < nums.size()) {
            if(nums[cur] != 0) {
                swap(nums[last], nums[cur]);
                last++;
            }
            cur++;
        }
    }
};

//26ms From: https://github.com/liuyubobobo/Play-with-Algorithm-Interview/blob/master/03-Using-Array/Course%20Code%20%28C%2B%2B%29/04-Move-Zeroes-II/main4.cpp
class Solution {
public:
    void moveZeroes(vector<int>& nums) {

        int k = 0; // nums中, [0...k)的元素均为非0元素

        // 遍历到第i个元素后,保证[0...i]中所有非0元素
        // 都按照顺序排列在[0...k)中
        // 同时, [k...i] 为0
        for(int i = 0 ; i < nums.size() ; i ++ )
            if( nums[i] )
                if( k != i )
                    swap( nums[k++] , nums[i] );
                else
                    k ++;
    }
};
