// Source : https://leetcode.com/problems/balanced-binary-tree/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Given a binary tree, determine if it is height-balanced.
* For this problem, a height-balanced binary tree is defined 
*  as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*    
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//13ms From: https://discuss.leetcode.com/topic/14114/my-c-solution-in-15ms
class Solution {
	public:
		int height(TreeNode *root) {
			if(root == NULL)return 0;
			return max(height(root->left), height(root->right)) + 1;
		}
		bool isBalanced(TreeNode* root) {
			if(root == NULL)return true;
			return  abs(height(root->left) - height(root->right)) <= 1;
		}
};
