// Source : https://leetcode.com/problems/range-sum-query-2d-immutable/
// Time:  O(n^2)
// Space: O(n^2)

/********************************************************************************** 
* 
* Given a 2D matrix matrix, find the sum of the elements inside the rectangle
* defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
* 
* The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8. 
* Example:
* Given matrix = [
*   [3, 0, 1, 4, 2],
*   [5, 6, 3, 2, 1],
*   [1, 2, 0, 1, 5],
*   [4, 1, 0, 1, 7],
*   [1, 0, 3, 0, 5]
* ]
* 
* sumRegion(2, 1, 4, 3) -> 8
* sumRegion(1, 1, 2, 2) -> 11
* sumRegion(1, 2, 2, 4) -> 12
* 
**********************************************************************************/

//19ms From: https://discuss.leetcode.com/topic/29401/c-with-helper
class NumMatrix {
public:
    NumMatrix(vector<vector<int>> &matrix) {
        accu = matrix;
        for(int i=0; i<matrix.size(); i++)
            for(int j=0; j<matrix[0].size(); j++)
                accu[i][j] += asum(i-1,j) + asum(i,j-1) - asum(i-1,j-1);
    }
    int sumRegion(int row1, int col1, int row2, int col2) {
        return asum(row2, col2) - asum(row1-1, col2) - asum(row2, col1-1) + asum(row1-1, col1-1);
    }
private:
    vector<vector<int>> accu;
    int asum(int i, int j){
        return i >= 0 && j >= 0 ? accu[i][j] : 0;
    }
};
// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);
