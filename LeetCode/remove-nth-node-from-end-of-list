// Source : https://leetcode.com/problems/remove-nth-node-from-end-of-list/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Given a linked list, remove the nth node from the end of list and return its head.
* 
* For example,
*  Given linked list: 1->2->3->4->5, and n = 2.
*  After removing the second node from the end, the linked list becomes 1->2->3->5.
*    
**********************************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

//3ms From: https://discuss.leetcode.com/topic/10240/a-simple-2ms-c-solution
class Solution
{
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* tail = head;
        ListNode* predel = head;
        
        while (tail != NULL) {
            tail = tail->next;
            if (n-- < 0) predel = predel->next;
        }
        if (n == 0) head = head->next;
        else predel->next = predel->next->next;
        delete tail;
        return head;
    }
};

//6ms From: https://discuss.leetcode.com/topic/5397/my-short-c-solution
class Solution
{
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //if(!head || !head->next) return nullptr;
        auto p=head, q=head;
        for(;n-->0;) { p=p->next; }
        if(p) {
            for(p=p->next;p;p=p->next, q=q->next) {}
            q->next=q->next->next;
        }
        else if(head) head=head->next;
        return head;
    }
};

//3ms From: https://discuss.leetcode.com/topic/13767/an-o-n-time-o-1-space-solution-without-dummy-head-inspired-by-linus-torvalds
class Solution
{
public:
    ListNode* removeNthFromEnd(ListNode* head, int n)
    {
        ListNode *fast = head;
        for (int i = 0; i < n; i++) fast = fast->next;
        ListNode **prev = &head;
        while (fast) {
            prev = &(*prev)->next;
            fast = fast->next;
        }
        ListNode *current = *prev;
        *prev = current->next;
        delete current;
        return head;
    }
};
