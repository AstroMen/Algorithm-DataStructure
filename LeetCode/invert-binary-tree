// Source : https://leetcode.com/problems/invert-binary-tree/
// Time:  O(log N)
// Space: O(1)

/********************************************************************************** 
* 
* Invert a binary tree.
*       4
*     /   \
*    2     7
*   / \   / \
*  1   3 6   9
* to
*       4
*     /   \
*    7     2
*   / \   / \
*  9   6 3   1
*    
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//DFS 0ms From: https://discuss.leetcode.com/topic/16039/straightforward-dfs-recursive-iterative-bfs-solutions/2
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == nullptr) {
            return nullptr;
        }

        TreeNode* left = root->left;
        TreeNode* right = root->right;
        root->left = invertTree(right);
        root->right = invertTree(left);
        return root;
    }
};

//BFS 3ms From: https://discuss.leetcode.com/topic/16138/recursive-and-non-recursive-c-both-4ms
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        std::stack<TreeNode*> stk;
        stk.push(root);
        
        while (!stk.empty()) {
            TreeNode* p = stk.top();
            stk.pop();
            if (p) {
                stk.push(p->left);
                stk.push(p->right);
                std::swap(p->left, p->right);
            }
        }
        return root;
    }
};
