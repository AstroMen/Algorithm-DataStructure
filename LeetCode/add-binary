// Source: https://leetcode.com/problems/add-binary/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Given two binary strings, return their sum (also a binary string).
* 
* For example,
* a = "11"
* b = "1"
* Return "100". 
* 
**********************************************************************************/

//3ms From: https://discuss.leetcode.com/topic/8981/short-code-by-c
class Solution {
public:
    string addBinary(string a, string b) {
        string s = "";
        int c = 0, i = a.size() - 1, j = b.size() - 1;
        while(i >= 0 || j >= 0 || c == 1)
        {
            c += i >= 0 ? a[i --] - '0' : 0;
            c += j >= 0 ? b[j --] - '0' : 0;
            s = char(c % 2 + '0') + s;
            c /= 2;    // Get carry
        }
        return s;
    }
};
//6ms From: https://discuss.leetcode.com/topic/4456/very-concise-c-solution-without-calculating-longest-string
class Solution {
public:
    string addBinary(string a, string b) {
        string result = "";
        int apos = a.size() - 1;
        int bpos = b.size() - 1;
        int adigit, bdigit, carry = 0;
        
        while (apos >= 0 || bpos >= 0 || carry == 1)
        {
            adigit = bdigit = 0;
            
            if (apos >= 0) adigit = a[apos--] == '1';
            if (bpos >= 0) bdigit = b[bpos--] == '1';
            
            // Another way: the digit is 1 if adigit + bdigit + carry == 1 or == 3, but I noticed that
            // XOR is more concise:
            result = static_cast<char>(adigit ^ bdigit ^ carry + '0') + result; 
            carry = adigit + bdigit + carry >= 2;
        }
        
        return result;
    }
};
