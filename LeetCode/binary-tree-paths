// Source : https://leetcode.com/problems/binary-tree-paths/
// Time:  O()
// Space: O(n)

/********************************************************************************** 
* 
* Given a binary tree, return all root-to-leaf paths.
*
* For example, given the following binary tree:
*    1
*  /   \
* 2     3
*  \
*   5
* 
* All root-to-leaf paths are:
* ["1->2->5", "1->3"]
*    
**********************************************************************************/

//3ms
/* follow up: non-recursive version */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if (root == NULL) return res;
        stack<TreeNode*> s;
        stack<string> pathStack;
        s.push(root);
        pathStack.push(to_string(root->val));
        
        while (!s.empty()) {
            TreeNode* curNode = s.top();
            s.pop();
            string tmpPath = pathStack.top();
            pathStack.pop();
            
            if (curNode->left == NULL && curNode->right == NULL) {
                res.push_back(tmpPath);
                continue;
            }
            if (curNode->left != NULL) {
                s.push(curNode->left);
                pathStack.push(tmpPath + "->" + to_string(curNode->left->val));
            }
            if (curNode->right != NULL) {
                s.push(curNode->right);
                pathStack.push(tmpPath + "->" + to_string(curNode->right->val));
            }
        }
        return res;
    }
};

//recursive version
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if (root == NULL) return res;
        dfs(root, to_string(root->val), res);
        return res;
    }
    
    void dfs(TreeNode* root, string path, vector<string>& res) {
        if (root->left == NULL && root->right == NULL)
            res.push_back(path);
        if (root->left != NULL)
            dfs(root->left, path + "->" + to_string(root->left->val), res);
        if (root->right != NULL)
            dfs(root->right, path + "->" + to_string(root->right->val), res);
    }
};
