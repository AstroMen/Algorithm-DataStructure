// Source : https://leetcode.com/problems/ones-and-zeroes/
// Time:  O(n^3)
// Space: O(n^2)

/********************************************************************************** 
* 
* In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.
* 
* For now, suppose you are a dominator of m 0s and n 1s respectively. 
* On the other hand, there is an array with strings consisting of only 0s and 1s.
* 
* Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.
* 
* Note:
*     The given numbers of 0s and 1s will both not exceed 100
*     The size of given string array won't exceed 600.
* 
* Example 1:
* Input: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
* Output: 4
* Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”
* 
* Example 2:
* Input: Array = {"10", "0", "1"}, m = 1, n = 1
* Output: 2
* Explanation: You could form "10", but then you'd have nothing left. Better form "0" and "1".
*    
**********************************************************************************/

//DP 252ms From: http://www.cnblogs.com/grandyang/p/6188893.html
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (string str : strs) {
            int zeros = 0, ones = 0;  //※※※ clear the value on last time
            for (char c : str) (c == '0') ? ++zeros : ++ones;
            for (int i = m; i >= zeros; --i) {
                for (int j = n; j >= ones; --j) {
                    //dp[i][j]: current, dp[i - zeros][j - ones]: 当前的i和j减去zeros和ones之前能拼成字符串的个数
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];
    }
};
/*
Array = {"10", "0", "1"}, m = 1, n = 1;
dp array's value:
for -> str = "10";
 0   0
 0  (1)
--------
for -> str = "0";
 0   0   // have not updated
(1) (1)  // have updated
--------
for -> str = "1";
 0  (1)
 1  (2)
*/

//[Unread]
//Greedy 9ms From: https://discuss.leetcode.com/topic/72970/3-solutions-256ms-for-dp-and-13ms-for-greedy-for-reference
class Solution {
    bool comp(string &a, string &b, char c) {
        int ca = count(a.begin(), a.end(), c), cb = count(b.begin(), b.end(), c);
        if (ca < cb) return true;
        if (ca == cb) return a.size() < b.size();
        return false;
    }
    int helper(vector<string>& strs, int m, int n) {
        int cnt = 0;
        for (int i = 0; i < strs.size(); i++) {
            int z = count(strs[i].begin(), strs[i].end(), '0'), o = strs[i].size() - z;
            m -= z;
            n -= o;
            if (m < 0 && n < 0) break;
            if (m >= 0 && n >= 0) cnt++;
            else { m += z; n += o; }
        }
        return cnt;
    }
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<string> zero(strs), one(strs);
        sort(zero.begin(), zero.end(), [this](string &a, string &b){return comp(a, b, '0');});
        sort(one.begin(), one.end(), [this](string &a, string &b){return comp(a, b, '1');});

        return max(helper(zero, m, n), helper(one, m, n));
    }
};
