// Source : https://leetcode.com/problems/minimum-path-sum/
// Time:  O(n^2)
// Space: O(n)

/********************************************************************************** 
* 
* Given a m x n grid filled with non-negative numbers,
* find a path from top left to bottom right which minimizes the sum of all numbers along its path.
*
* Note: You can only move either down or right at any point in time.
*    
**********************************************************************************/

//9ms My solution
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size()==0) return 0;
        const int m = grid.size();
        const int n = grid[0].size();
        
        int dp[m][n];
        dp[0][0]=grid[0][0];
        for(int i=1;i<m;i++)
            dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int i=1;i<n;i++)
            dp[0][i]=dp[0][i-1]+grid[0][i];
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        return dp[m-1][n-1];
    }
};
//Sliding Array
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size()==0) return 0;
        const int m = grid.size();
        const int n = grid[0].size();
        
        int dp[n];
        fill(dp,dp+n,INT_MAX);  // 初始值是INT_MAX，因为后面用了min函数。
        dp[0]=grid[0][0];
        for(int i=1;i<n;i++)
            dp[i]=dp[i-1]+grid[0][i];
        for(int i=1;i<m;i++)
        {
            dp[0]+=grid[i][0];
            for(int j=1;j<n;j++)
            {
                // 左边的f[j]，表示更新后的f[j]，与公式中的f[i[[j] 对应
                // 右边的f[j]，表示老的f[j]，与公式中的f[i-1][j] 对应
                dp[j]=min(dp[j-1],dp[j])+grid[i][j];
            }
        }
        return dp[n-1];
    }
};
