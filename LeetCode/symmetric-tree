// Source : https://leetcode.com/problems/symmetric-tree/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
*
* For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
*     1
*    / \
*   2   2
*  / \ / \
* 3  4 4  3
*
* But the following [1,2,2,null,3,null,3] is not:
*     1
*    / \
*   2   2
*    \   \
*    3    3
*    
**********************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//6ms From: https://discuss.leetcode.com/topic/9503/15-lines-of-c-solution-8-ms
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if (!root) return true;
        return helper(root->left, root->right);
    }
    
    bool helper(TreeNode* p, TreeNode* q) {
        if (!p && !q) 
            return true;
        else if (!p || !q) 
            return false;
        if (p->val != q->val) 
            return false;
        
        return helper(p->left,q->right) && helper(p->right, q->left); 
    }
};

//Iterative in BFS & DFS: https://discuss.leetcode.com/topic/38130/recursive-and-iterative-dfs-and-bfs-in-c-easy-to-understand
