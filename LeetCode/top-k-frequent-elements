// Source : https://leetcode.com/problems/top-k-frequent-elements/
// Time:  O(nlog(n-k))
// Space: O(n)

/********************************************************************************** 
* 
*  Given a non-empty array of integers, return the k most frequent elements.
* 
* For example,
* Given [1,1,1,2,2,3] and k = 2, return [1,2]. 
*
* Note:
*    You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
*    Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
*
**********************************************************************************/

//36ms From: https://discuss.leetcode.com/topic/44226/c-o-n-log-n-k-unordered_map-and-priority_queue-maxheap-solution
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> map;
        for(int num : nums){
            map[num]++;
        }
        
        vector<int> res;
        // pair<first, second>: first is frequency,  second is number
        priority_queue<pair<int,int>> pq; 
        for(auto it = map.begin(); it != map.end(); it++){
            pq.push(make_pair(it->second, it->first));
            if(pq.size() > (int)map.size() - k){
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }
};
//priority_queue: heap sort

//36ms MinHeap From: https://github.com/AstroMen/Algorithm-DataStructure/edit/master/LeetCode/top-k-frequent-elements
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> counts;
        priority_queue<int, vector<int>, greater<int>> max_k;
        for(auto i : nums) ++counts[i];
        for(auto & i : counts) {
            max_k.push(i.second);
            // Size of the min heap is maintained at equal to or below k
            while(max_k.size() > k) max_k.pop();
        }
        vector<int> res;
        for(auto & i : counts) {
            if(i.second >= max_k.top()) res.push_back(i.first);
        }
        return res;
    }
};

//36ms MaxHeap From: https://discuss.leetcode.com/topic/54560/five-efficient-solutions-in-c-well-explained
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) 
    {
        vector<int> v;
        unordered_map<int, int> count_map;
        for(auto n: nums) count_map[n]++;
        priority_queue<pair<int, int>> maxHeap;
        for(auto& pair: count_map) maxHeap.emplace(pair.second, pair.first);
        while(k--)
        {
            v.push_back(maxHeap.top().second);
            maxHeap.pop();
        }
        return v;
    }
};
