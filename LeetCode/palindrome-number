// Source : https://leetcode.com/problems/palindrome-number/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Determine whether an integer is a palindrome. Do this without extra space.
*    
**********************************************************************************/


//82ms
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0 || (x!=0 &&x%10==0)) return false;  // x!=0&&x%10==0: eg. 10, 20, 30...
        int sum=0;
        while(x>sum)
        {
            sum = sum*10+x%10;
            x = x/10;
        }
        return (x==sum)||(x==sum/10);  // for odd: x==sum/10; for even: x==sum
    }
};

//69ms
class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0) return false;
        if(x < 10) return true;
        int y = 0;
        int tmp = x;
        while(tmp)
        {
            y = y * 10 + (tmp % 10);
            tmp /= 10;
        }
        return x == y;
    }
};

//68ms
class Solution {
public:
    bool isPalindrome(int x) {
        return (x>=0 && x == reverse(x));
    }
private:    
    int reverse(int x) {
        int y=0;

        int n;
        while( x!=0 ){
            n = x%10;
            y = y*10 + n;
            x /= 10;
        }
        return y;
    }
};

//68ms
class Solution {
public:
    bool isPalindrome(int x) {
        if (x<0) {
            return false;
        }
        
        int len=1;
        for (len=1; (x/len) >= 10; len*=10 );
        
        while (x != 0 ) {
            int left = x / len;
            int right = x % 10;
            
            if(left!=right){
                return false;
            }
            
            x = (x%len) / 10;
            len /= 100;
        }
        return true;
    }
};
