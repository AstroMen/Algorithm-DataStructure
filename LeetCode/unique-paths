// Source : https://leetcode.com/problems/unique-paths/
// Time:  O(n^2)
// Space: O(n)

/********************************************************************************** 
* 
* A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
* 
* The robot can only move either down or right at any point in time.
* The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
* 
* How many possible unique paths are there?
*
* Note: m and n will be at most 100.
*    
**********************************************************************************/

//0ms DP
class Solution {
public:
    int uniquePaths(int m, int n) { 
        int dp[m][n];
        dp[0][0]=0;
        for(int i=0;i<m;i++)
            dp[i][0]=1;
        for(int j=0;j<n;j++)
            dp[0][j]=1;
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
        return dp[m-1][n-1];
    }
};
//3ms Sliding array
class Solution {
public:
    int uniquePaths(int m, int n) {
        int* dp = new int[n];
        memset(dp,0,sizeof(int)*n);
        dp[0]=1;
        for(int i=0;i<m;i++)
            for(int j=1;j<n;j++)
                dp[j]=dp[j-1]+dp[j];
        return dp[n-1];
    }
};
