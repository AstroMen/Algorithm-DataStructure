// Source : https://leetcode.com/problems/word-ladder/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given two words (beginWord and endWord), and a dictionary's word list,
* find the length of shortest transformation sequence from beginWord to endWord, such that:
*    Only one letter can be changed at a time
*    Each intermediate word must exist in the word list
*
* For example,
* Given:
* beginWord = "hit"
* endWord = "cog"
* wordList = ["hot","dot","dog","lot","log"]
*
* As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
* return its length 5. 
*    
**********************************************************************************/

//46ms From: https://discuss.leetcode.com/topic/53092/52-ms-c-solution-with-18-lines-only
//two-end BFS + hash table
class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        unordered_set<string> head({ beginWord }), tail({ endWord }), next;
        int dist = 1, size = beginWord.size();
        while (!head.empty()) {
            for (auto& h : head) wordList.erase(h);
            for (auto src : head) {
                for (int i = 0; i<size; ++i) {
                    char tmp = src[i];
                    for (src[i] = 'a'; src[i] <= 'z'; ++src[i]) {
                        auto it = wordList.find(src);
                        if (it != wordList.end()) {
                            if (tail.find(*it) != tail.end()) return dist+1;
                            next.insert(*it);
                        }
                    }
                    src[i] = tmp;
                }
            }
            ++dist;
            head.swap(next);
            next.clear();
            if (head.size()>tail.size()) head.swap(tail);  //two-end BFS
        }
        return 0;
    }
};

//289ms From: https://discuss.leetcode.com/topic/16983/easy-76ms-c-solution-using-bfs
class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordDict) {
        wordDict.insert(endWord);
        queue<string> toVisit;
        addNextWords(beginWord, wordDict, toVisit);
        int dist = 2;
        while (!toVisit.empty()) {
            int num = toVisit.size();
            for (int i = 0; i < num; i++) {
                string word = toVisit.front();
                toVisit.pop();
                if (word == endWord) return dist;
                addNextWords(word, wordDict, toVisit);
            }
            dist++;
        }
        return 0;
    }
private:
    void addNextWords(string word, unordered_set<string>& wordDict, queue<string>& toVisit) {
        wordDict.erase(word);
        for (int p = 0; p < (int)word.length(); p++) {
            char letter = word[p];
            for (int k = 0; k < 26; k++) { 
                word[p] = 'a' + k;
                if (wordDict.find(word) != wordDict.end()) {
                    toVisit.push(word);
                    wordDict.erase(word);
                }
            }
            word[p] = letter;
        } 
    } 
};

//59ms From: https://discuss.leetcode.com/topic/43171/c-52ms-100-two-ends-bfs-solutions
class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        int res = 1;
        unordered_set<string> set1 {beginWord};
        unordered_set<string> set2 {endWord};
        
        while (set1.size()) {
            res++;
            unordered_set<string> set;
            for (auto word : set1) wordList.erase(word);
            for (auto word :set1) {
                for (size_t i = 0; i < word.size(); ++i) {
                    string next = word;
                    for (char c = 'a'; c <= 'z'; ++c) {
                        next[i] = c;
                        if (wordList.find(next) == wordList.end()) continue;
                        if (set2.find(next) != set2.end()) return res;
                        set.insert(next);
                    }
                }
            }
            set1 = set.size() < set2.size() ? set : set2;
            set2 = set.size() < set2.size() ? set2 : set;
        }
        
        return 0;
    }
};
