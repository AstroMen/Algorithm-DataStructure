// Source : https://leetcode.com/problems/permutations/
// Time:  O(n!)
// Space: O(1)

/********************************************************************************** 
* 
* Given a collection of distinct numbers, return all possible permutations. 
* 
* For example,
* [1,2,3] have the following permutations:
* [
*   [1,2,3],
*   [1,3,2],
*   [2,1,3],
*   [2,3,1],
*   [3,1,2],
*   [3,2,1]
* ]
*    
**********************************************************************************/

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > result;
        if(nums.size()==0)
            return result;
        sort(nums.begin(), nums.end());    //sort the list
        permute(nums,0,result);
        return result;
    }
private:
    void permute(vector<int>& nums, int start, vector<vector<int>>& result) {
        if(start==nums.size())
            result.push_back(nums);
        else
        {
            for(int i=start;i<nums.size();i++)
            {
                swap(nums[start], nums[i]);
                permute(nums, start+1, result);
                swap(nums[start], nums[i]);
            }
        }
    }
};
