// Source : https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
// Time:  O()
// Space: O()

/********************************************************************************** 
* 
* Given preorder and inorder traversal of a tree, construct the binary tree.
* Note: You may assume that duplicates do not exist in the tree. 
*  
**********************************************************************************/

//13ms
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        TreeNode *root=NULL; stack<TreeNode *> MyData;
        if(preorder.empty()) return root;
        root = new TreeNode(preorder[0]);
        MyData.push(root); int index = 0;
       	for(int i=1; i<=preorder.size(); i++) {
       		TreeNode *cur = MyData.top();
       		if((MyData.top()->val)!=inorder[index]) {
       		    cur->left = new TreeNode(preorder[i]);
       		    MyData.push(cur->left);
       		} else {
       		    while(!MyData.empty() && ((MyData.top()->val)==inorder[index])) {
       		        cur=MyData.top(); MyData.pop(); index++; 
       		    }
       		    if(index<inorder.size()) {
       		        cur->right = new TreeNode(preorder[i]);
       		        MyData.push(cur->right);
       		    } 
       		}  
       	}
       	return root;
    }
};

//39ms
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        return create(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
    }

    TreeNode* create(vector<int>& preorder, vector<int>& inorder, int ps, int pe, int is, int ie){
        if(ps > pe){
            return nullptr;
        }
        TreeNode* node = new TreeNode(preorder[ps]);
        int pos;
        for(int i = is; i <= ie; i++){
            if(inorder[i] == node->val){
                pos = i;
