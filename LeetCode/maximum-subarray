
// Source : https://leetcode.com/problems/maximum-subarray/
// Time:  O(n)
// Space: O(1)

/********************************************************************************** 
* 
* Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
* 
* For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
* the contiguous subarray [4,-1,2,1] has the largest sum = 6. 
*    
**********************************************************************************/

//9ms
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int sum=nums[0];
        int res=sum;
        for(int i=1;i<nums.size();i++)
        {
            if(sum>0)
                sum+=nums[i];
            else
                sum=nums[i];
            res=max(res,sum);
        }
        return res;
    }
};

//DP 9ms
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int sum = 0;
        int res = INT_MIN;
        for(int i=0; i<nums.size(); i++)
        {
            sum = max(sum+nums[i], nums[i]);
            res = max(res, sum);
        }
        return res;
    }
};
