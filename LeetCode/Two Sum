// Source : https://leetcode.com/problems/two-sum/
// Time:  O(n)
// Space: O(n)

/********************************************************************************** 
* 
* Given an array of integers, return indices of the two numbers such that they add up to a specific target.
* 
* You may assume that each input would have exactly one solution.
* 
* Example:
* Given nums = [2, 7, 11, 15], target = 9,
* Because nums[0] + nums[1] = 2 + 7 = 9,
* return [0, 1].
*    
**********************************************************************************/

// The implementation as below is bit tricky. but not difficult to understand
//
//  1) Traverse the array one by one
//  2) just put the 'target - num[i]'(not 'num[i]') into the map
//     so, when we checking the next num[i], if we found it is exisited in the map.
//     which means we found the second one.
    
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
        if(nums.size()<2)
            return result;
            
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++){
            // not found the second one
            if (m.find(nums[i]) != m.end() ) {
                // found the second one
                result.push_back(m[nums[i]]);
                result.push_back(i);
                break;
            }
            // store the first one poisition into the second one's key
            m[target - nums[i]] = i; 
        }
        return result;
    }
};


class Solution {
public:
    vector<int> twoSum(vector<int> &nums, int target) {
        vector<int> result;
        if(nums.size()<2)
            return result;
            
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            int v = target - nums[i];
            if (m.find(v) != m.end()) {
                result.push_back(m[v]);
                result.push_back(i);
                break;
            }
            m[nums[i]] = i;
        }
        return result;
    }
};
