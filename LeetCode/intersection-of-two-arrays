// Source : https://leetcode.com/problems/intersection-of-two-arrays/
// Time:  O(n)
// Space: O(n)

/********************************************************************************** 
* 
*  Given two arrays, write a function to compute their intersection.
* 
* Example:
* Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].
*
* Note:
*   Each element in the result must be unique.
*   The result can be in any order.
*    
**********************************************************************************/

//9ms My solution
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> result;
        if(nums1.size()==0||nums2.size()==0)
            return result;
        unordered_set<int> intersection;
        for(int i=0;i<nums1.size();i++)
            intersection.insert(nums1[i]);
        for(int i=0;i<nums2.size();i++)
            if(intersection.find(nums2[i])!=intersection.end())
            {
                result.push_back(nums2[i]);
                intersection.erase(nums2[i]);
            }
        return result;
    }
};

//9ms From: https://discuss.leetcode.com/topic/45693/8ms-concise-c-using-unordered_set
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> m(nums1.begin(), nums1.end());
        vector<int> res;
        for (auto a : nums2)
            if (m.count(a)) {
                res.push_back(a);
                m.erase(a);
            }
        return res;
    }
};
