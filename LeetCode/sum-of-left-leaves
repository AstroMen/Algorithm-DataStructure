// Source : https://leetcode.com/problems/sum-of-left-leaves/
// Time:  O(n)
// Space: O(l)

/********************************************************************************** 
* 
* Find the sum of all left leaves in a given binary tree.
* 
* Example:
*     3
*    / \
*   9  20
*     /  \
*    15   7
* 
* There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
*  
**********************************************************************************/

 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//3ms Reference: https://discuss.leetcode.com/topic/60409/3-line-recursive-c-solution-no-need-to-explain
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==nullptr) return 0;
        return dfs(root, 0);
    }
private:
    int dfs(TreeNode* root, int isLeft)
    {
        if(root==nullptr) return 0;
        if(!root->left && !root->right) return isLeft?root->val:0;
        return dfs(root->left, 1)+dfs(root->right, 0);
    }
};
