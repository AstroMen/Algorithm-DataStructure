#include <iostream>
#include <vector>
using namespace std;

void _ArticulationPoint(const vector<vector<int> >& graph, int i, int parent, int root, int* dfn, int* low, int& n, bool* an)
{
    dfn[i]=low[i]=n;
    n++;
    int N = (int)graph.size();
    int child = 0;
    for(int j=0; j<N; j++)
    {
        if(graph[i][j]!=0)  //是否有边
        {
            if(dfn[j]==-1)  //尚未访问
            {
                child++;
                _ArticulationPoint(graph, j, i, root, dfn, low, n, an);
                low[i] = min(low[i], low[j]);
                if((i!=root) && (low[j]>=dfn[i]))
                    an[i] = true;
                else if((i==root) && (child==2))  //本质是child>=2，只有第一次是2的时候，才赋为true
                    an[i] = true;
            }
            else if(parent!=j)  //已访问过，说明j是i的父结点或祖先结点，若此时i的父结点不是j，则j是i的祖先结点
                low[i] = min(low[i], dfn[j]);
        }
    }
}

void ArticulationPoint(const vector<vector<int> >& graph, bool* an)
{
    int N = (int)graph.size();
    int* dfn = new int[N];  //dfn[i]=j：第i个结点是第j个被访问的：访问编号
    fill(dfn, dfn+N, -1);  //所有结点尚未访问
    int* low = new int[N];  //low[i]=j：i及其子孙回溯的最早结点为j
    int root = 0;  //任意指定一个结点作为根结点
    int n = 0; //访问编号
    _ArticulationPoint(graph, root, -1, root, dfn, low, n, an);
    delete[] dfn;
    delete[] low;
}
void Print(bool* an, int N)
{
    for(int i=0;i<N;i++)
        if(an[i])
            cout<<i<<' ';
    // Print: 0 1 6
}
int main()
{
    int N=13;
    vector<vector<int> > graph(N, vector<int>(N));  //邻接矩阵
    graph[0][1]=graph[0][2]=graph[0][5]=graph[0][11]=1;
    graph[1][0]=graph[1][2]=graph[1][3]=graph[1][4]=graph[1][6]=graph[1][7]=graph[1][12]=1;
    graph[2][0]=graph[2][1]=1;
    graph[3][1]=graph[3][4]=1;
    graph[4][1]=graph[4][3]=1;
    graph[5][0]=1;
    graph[6][1]=graph[6][7]=graph[6][8]=graph[6][10]=1;
    graph[7][2]=graph[7][6]=graph[7][10]=1;
    graph[8][6]=1;
    graph[9][11]=graph[9][12]=1;
    graph[10][6]=graph[10][7]=1;
    graph[11][0]=graph[11][9]=graph[11][12]=1;
    graph[12][1]=graph[12][9]=graph[12][11]=1;
    //graph[4][12]=graph[12][4]=1;  //EM
    
    bool* an = new bool[N];  //是否是割点
    fill(an, an+N, false);  //初始：不是
    ArticulationPoint(graph, an);
    Print(an, N);

    return 0;
}
